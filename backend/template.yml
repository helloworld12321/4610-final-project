# This is the SAM template that represents the architecture of your serverless application
# https://docs.aws.amazon.com/serverless-application-model/latest/developerguide/serverless-sam-template-basics.html

# The AWSTemplateFormatVersion identifies the capabilities of the template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/format-version-structure.html
AWSTemplateFormatVersion: 2010-09-09
Description: >-
  4610-final-project

# Transform section specifies one or more macros that AWS CloudFormation uses to process your template
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/transform-section-structure.html
Transform:
- AWS::Serverless-2016-10-31

# Resources declares the AWS resources that you want to include in the stack
# https://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/resources-section-structure.html
Resources:
  # We need at least one function in order to spin up an API gateway.
  # This function doesn't actually do anything useful; it's just a placeholder.
  helloFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: src/handlers/hello.handler
      Runtime: nodejs14.x
      MemorySize: 128
      Timeout: 100
      Description: A "Hello, World!" function.
      Events:
        Api:
          Type: Api
          Properties:
            Path: /
            Method: GET

  # A DynamoDB table to store geographical information about cities and the
  # distances between them.
  CityData:
    Type: AWS::DynamoDB::Table
    Properties:
      # We only need to declare those attributes that we're using for keys.
      # (See https://stackoverflow.com/a/55080737)
      AttributeDefinitions:
        - AttributeName: "region"
          AttributeType: "S"
      # The key "region" uniquely identifies a set of cities. For example,
      # you might have one set of cities in the region "Minnesota" and another
      # set of cities in the region #
      KeySchema:
        - AttributeName: "region"
          KeyType: "HASH"
      # We'll limiting the database to 500 reads and 50 writes per second. That
      # should be more than enough.
      ProvisionedThroughput:
        ReadCapacityUnits: 500
        WriteCapacityUnits: 50

Outputs:
  WebEndpoint:
    Description: "API Gateway endpoint URL for Prod stage"
    Value: !Sub "https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/"
